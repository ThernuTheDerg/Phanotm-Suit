#include <Arduino.h>
#include <Wire.h>
#include <SSD1306Wire.h>
#include <qrcode.h>
#include <WiFi.h>
#include <Preferences.h>



#ifndef MONITOR_SPEED
  #define MONITOR_SPEED 115200
#endif
#ifndef DEBUG
  #define DEBUG 1
#endif
#if DEBUG == 1
  #define logStart Serial.begin(MONITOR_SPEED);
  #define logEnd Serial.end();
  #define log(x) Serial.print(x);
  #define logln(x) Serial.println(x);
  #define logWrite(x) Serial.write(x)
#else
  #define logStart
  #define logEnd
  #define log(x)
  #define logln(x)
  #define logWrite(x)
#endif


#define DISPLAYADRESS 0x3C
#define HAPTIC_CLUSTER_0 0x3C
#define HAPTIC_CLUSTER_1 0x3C
#define DEBUGDELAY 500 //TODO: Find some better solution

//Prototypes
void initDisplay();
bool startup(void);
void sendResponse();
void wifiWebServer(void);
void makeAP(void);
void drawQR(String qrbytes, String instructions);
void printToDisplayLog(String chars);
String extractSSID(String data);
String extractPWD(String data);
String translateSpecialChars(String input);

//Globals
Preferences preferences;
SSD1306Wire display(DISPLAYADRESS, 21, 22);
WiFiServer server(80);  
WiFiClient client;  
String http;
String displayLog="";
bool displaymode = false;
bool hapticCluster[2] = {false, false};
char ssid[256];
char pwd[256];

//Funct√≠ons
bool startup(){
    logStart;
    logln("Commencing integrity check.");
    //Integrity checks
    int error = 4;
    Wire.begin();
    //Integrity check on display
    Wire.beginTransmission(DISPLAYADRESS);//Display
    error = Wire.endTransmission();
    if(error == 0){
      displaymode= true; //if display found, use it
      logln("Display: OK");
      error = 4;
    }else{
    logln("Display: ERROR");
    }
   if(displaymode)initDisplay();//only if displaymode is found
  printToDisplayLog("Commencing integrity check\nof haptic clusters...\n");
  delay(DEBUGDELAY);
    //Integrity check on haptic cluster 0
    Wire.beginTransmission(HAPTIC_CLUSTER_0);//Display
    error = Wire.endTransmission();
    if(error == 0){
      logln("Haptic cluster 0: OK");
      printToDisplayLog("Haptic cluster 0: OK\n");
      hapticCluster[0] = true; //enables haptic cluster 0
      error = 4;
    }else{
    logln("Haptic cluster 0: ERROR");
    printToDisplayLog("Haptic cluster 0: ERROR\n");
    }
    delay(DEBUGDELAY);
    //Integrity check on haptic cluster 1
    Wire.beginTransmission(HAPTIC_CLUSTER_1);//Display
    error = Wire.endTransmission();
    if(error == 0){
      displaymode= true; //if display found, use it
      logln("Haptic cluster 1: OK");
      printToDisplayLog("Haptic cluster 1: OK\n");
      hapticCluster[1] = true; //enables haptic cluster 1
      error = 4;
    }else{
    logln("Haptic cluster 1: ERROR");
    printToDisplayLog("Haptic cluster 1: ERROR\n");
    }
    delay(DEBUGDELAY);
    logln("Fetching WiFi cedentials");
    printToDisplayLog("Fetching WiFi credentials\n");
    preferences.begin("credentials", false);
    preferences.getString("ssid", "").toCharArray(ssid, 256);
    preferences.getString("pwd", "").toCharArray(pwd, 256);
    delay(DEBUGDELAY);
    if(ssid[0] == '\0'){
      printToDisplayLog("No valid credentials found\n");
      return false;
    }else{
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, pwd);
    printToDisplayLog("Connecting to WiFi\n");
    printToDisplayLog("SSID: ");
    printToDisplayLog(ssid);
    printToDisplayLog("\n\n");
    for(int i = 0; i<40; i++){//Try 40 times ~20sec
      printToDisplayLog(".");
      delay(1500);
      if(WiFi.status() == WL_CONNECTED){break;}
    }
    printToDisplayLog("\n\n");
    return WiFi.status() == WL_CONNECTED;
    }
    
  }
void initDisplay(){
    display.init();
    display.flipScreenVertically();
    display.setTextAlignment(TEXT_ALIGN_LEFT);
    display.setFont(ArialMT_Plain_10);
    display.clear();
    display.display();
}

void setup() {

  if(startup()){
    printToDisplayLog("Connection sucessful\nIP: ");
    printToDisplayLog(WiFi.localIP().toString());
    printToDisplayLog("\nDisabling Serial Connection");
    logEnd;
    delay(DEBUGDELAY);
    printToDisplayLog("\nEntering main loop");
    delay(DEBUGDELAY);
    display.clear();
    display.display();
  }else{
    printToDisplayLog("Connection failed\nEntering WiFi setup\n");
    makeAP();
    wifiWebServer();
    printToDisplayLog("\n\n\n\n\nValues written...\nRestarting now");
    delay(2000);
    ESP.restart();
  }
  

  
}

void loop() {
}    

void printToDisplayLog(String string){

  if(!displaymode)return; //if displaymode is disabled dont print
  //Prepare Text
  displayLog += string;
  int fpos =0;
  int lines =0;
  for(int i=0; i<displayLog.length(); i++){
    if(displayLog.charAt(i) == '\n'){
      if(lines == 0)fpos =i;
      lines++;
    }
  }
  if(lines > 5){
    displayLog = displayLog.substring(fpos+1);
  }

  //Write to display
  display.clear();
  display.setColor(WHITE);
  display.drawString(0,0,displayLog);
  display.display();
}

void makeAP(){
  WiFi.mode(WIFI_OFF);
  delay(2000);
  WiFi.mode(WIFI_AP); //Access Point mode
  WiFi.softAP("AP","Phantom1");
   IPAddress ip = WiFi.softAPIP();
   String address ="http://";
   address += ip.toString();
   address += "/";

  logln("AP open");
  drawQR("WIFI:T:WPA;S:AP;P:Phantom1;H:;;", "Scan QR to\nconnect to\nthe Vest.");
  while(WiFi.softAPgetStationNum()<1){
  vTaskDelay(50);
  }

  drawQR(address,"Scan again\nto open\nsetup menu.");
  logln(address);
}

void wifiWebServer(){
  IPAddress ip = WiFi.softAPIP();
  String s_ssid;
  String s_pwd;


  logln(ip);
  server.begin();
  for(;;){
    if(client = server.available()){
      String clientData = "";  
      while ( client.connected() ) {    // Wait until the client finish sending HTTP request  
        if ( client.available() ) {     // If there is a data,  
        char c = client.read();      //  read one character  
        http += c;            //  then parse it  
        logWrite(c);
        if (c == '\n') {           // If the character is carriage return,   
                                  //  it means end of http request from client 
          if (clientData.length() == 0) { //  Now that the clientData is cleared,  
          sendResponse();        //    perform the necessary action  
          client.println("<!DOCTYPE html>");
          client.println("<html>");
          client.println("<head>");
          client.println("<title>Phantom WiFi setup</title>");
          client.println("</head>");
          client.println("<body>");
          client.println("<h1>WiFi setup</h1>");
          client.println("<text>Enter WiFi credentials of the network you want to connect to</text><br><br>");
          client.println("<form action='/' method='POST'>");
          client.println("<input type='text' id='ssid' name='ssid' placeholder='SSID'><br><br>");
          client.println("<input type='text' id='pwd' name='pwd' placeholder='Password'><br><br>");
          client.println("<input type='submit' id='btn1' value='Connect'>");
          client.println("</form> ");
          client.println("</body>");
          client.println("</html>");
          client.println();
          break;
          } else {  
          clientData = "";       //  First, clear the clientData  
          }  
        } else if (c != '\r') {      // Or if the character is NOT new line  
          clientData += c;        //  store the character to the clientData variable  
        }  
        }
      }
      http ="";
      String data;
      for(;;){
        char x = client.read();
        if(((int)x) < 0 || ((int)x) > 254) break;
        logln(x);
        data+=x;

      }
      
      logln("<\n\n\n");
      client.stop();
      logln("Cliend disconnected");
      s_ssid = translateSpecialChars(extractSSID(data));
      s_pwd = translateSpecialChars(extractPWD(data));
      if(s_ssid.length() > 0&&s_pwd.length() > 0)break;
    }
  }
  preferences.putString("ssid", s_ssid); 
  preferences.putString("pwd", s_pwd);
  logln("SETUP SUCCESSFUL");
}

String extractSSID(String data){
  if(data.indexOf("ssid=") >= 0){
    int i = data.indexOf("ssid=");
    while(data.charAt(i) != '&' && ((int)(data.charAt(i))) > -1 && ((int)(data.charAt(i))) < 255 && i < 512 )i++;//max length 512 (Who has such a long ssid or pwd anyways? ^^)
    return data.substring(data.indexOf("ssid=")+5,i);
  }else{
  return "";
  }
}

String extractPWD(String data){
  if(data.indexOf("pwd=") >= 0){
    int i = data.indexOf("pwd=");
    while(data.charAt(i) != '&' && ((int)(data.charAt(i))) > -1 && ((int)(data.charAt(i))) < 255 && i < 512 )i++;//max length 512 (Who has such a long ssid or pwd anyways? ^^)
    return data.substring(data.indexOf("pwd=")+4,i);
  }else{
  return "";
  }
}

String translateSpecialChars(String input){
  String output;
  for(int i = 0; i<input.length(); i++){
    if(input.charAt(i) == '+'){output += ' '; i++;}
    if(input.charAt(i)=='%'){
      char translated = '-';
      char tmp[2] = {input.charAt(i+1),input.charAt(i+2)};
      if(tmp[0] == '2' && tmp[1] == '4') translated = '$';
      if(tmp[0] == '2' && tmp[1] == '6') translated = '&';
      if(tmp[0] == '2' && tmp[1] == 'B') translated = '+';
      if(tmp[0] == '2' && tmp[1] == 'C') translated = ',';
      if(tmp[0] == '2' && tmp[1] == 'F') translated = '/';
      if(tmp[0] == '3' && tmp[1] == 'A') translated = ':';
      if(tmp[0] == '3' && tmp[1] == 'B') translated = ';';
      if(tmp[0] == '3' && tmp[1] == 'D') translated = '=';
      if(tmp[0] == '3' && tmp[1] == 'F') translated = '?';
      if(tmp[0] == '4' && tmp[1] == '0') translated = '@';
      if(tmp[0] == '2' && tmp[1] == '0') translated = ' ';
      if(tmp[0] == '2' && tmp[1] == '2') translated = '"';
      if(tmp[0] == '3' && tmp[1] == 'C') translated = '<';
      if(tmp[0] == '3' && tmp[1] == 'E') translated = '>';
      if(tmp[0] == '2' && tmp[1] == '3') translated = '#';
      if(tmp[0] == '2' && tmp[1] == '5') translated = '%';
      if(tmp[0] == '7' && tmp[1] == 'B') translated = '{';
      if(tmp[0] == '7' && tmp[1] == 'D') translated = '}';
      if(tmp[0] == '7' && tmp[1] == 'C') translated = '|';
      if(tmp[0] == '5' && tmp[1] == 'C') translated = '\\';
      if(tmp[0] == '5' && tmp[1] == 'E') translated = '^';
      if(tmp[0] == '7' && tmp[1] == 'E') translated = '~';
      if(tmp[0] == '5' && tmp[1] == 'B') translated = '[';
      if(tmp[0] == '5' && tmp[1] == 'D') translated = ']';
      if(tmp[0] == '6' && tmp[1] == '0') translated = '`';
      if(tmp[0] == '2' && tmp[1] == '8') translated = '(';
      if(tmp[0] == '2' && tmp[1] == '9') translated = ')';
      //if(tmp[0] == '8' && tmp[1] == '0') translated = '‚Ç¨';
      if(tmp[0] == '2' && tmp[1] == '7') translated = '\'';
      if(tmp[0] == '2' && tmp[1] == '1') translated = '!';

      output += translated;
      i += 2;
    }else{
      output += input.charAt(i);
    }
  }
  return output;
}

void sendResponse(){
  client.println("HTTP/1.1 200 OK\nContent-type:text/html\nConnection: close\n");
}

void drawQR(String qrbytes, String instructions){
    QRCode qrcode;
    uint8_t qrcodeData[qrcode_getBufferSize(3)];
    char buf[32];
    qrbytes.toCharArray(buf,  qrbytes.length());
    qrcode_initText(&qrcode, qrcodeData, 3, ECC_QUARTILE, buf);//For this AP SSID: tmp PWD: phantom
    display.clear();
    display.fillRect(0, 0, 64, 64);
    display.setColor(BLACK);
    for (uint8_t y = 0; y < qrcode.size; y++) {
        for (uint8_t x = 0; x < qrcode.size; x++) {
            if(qrcode_getModule(&qrcode, x, y)){
              int y_offset = 3;
              int x_offset = 3;
              display.setPixel(x_offset+x*2,y_offset+y*2);
              display.setPixel(x_offset+x*2,y_offset+y*2+1);
              display.setPixel(x_offset+x*2+1,y_offset+y*2);
              display.setPixel(x_offset+x*2+1,y_offset+y*2+1);
            }
        }
    }
    //Instructions for user
    display.setColor(WHITE);
    display.drawString(67,0, instructions);
    display.display();
}
